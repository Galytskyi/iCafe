// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Order {

namespace {

const ::google::protobuf::Descriptor* wrapOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wrapOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* wrapOrders_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wrapOrders_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_order_2eproto() {
  protobuf_AddDesc_order_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "order.proto");
  GOOGLE_CHECK(file != NULL);
  wrapOrder_descriptor_ = file->message_type(0);
  static const int wrapOrder_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, order_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, people_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, cancel_code_),
  };
  wrapOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wrapOrder_descriptor_,
      wrapOrder::default_instance_,
      wrapOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wrapOrder));
  wrapOrders_descriptor_ = file->message_type(1);
  static const int wrapOrders_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrders, orders_),
  };
  wrapOrders_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wrapOrders_descriptor_,
      wrapOrders::default_instance_,
      wrapOrders_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrders, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wrapOrders, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wrapOrders));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_order_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wrapOrder_descriptor_, &wrapOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wrapOrders_descriptor_, &wrapOrders::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_order_2eproto() {
  delete wrapOrder::default_instance_;
  delete wrapOrder_reflection_;
  delete wrapOrders::default_instance_;
  delete wrapOrders_reflection_;
}

void protobuf_AddDesc_order_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013order.proto\022\005Order\"\231\001\n\twrapOrder\022\022\n\007ve"
    "rsion\030\001 \002(\005:\0010\022\020\n\005state\030\002 \001(\005:\0010\022\017\n\004type"
    "\030\003 \001(\005:\0010\022\023\n\010order_id\030\004 \001(\003:\0010\022\025\n\norder_"
    "time\030\005 \001(\005:\0010\022\021\n\006people\030\006 \001(\005:\0010\022\026\n\013canc"
    "el_code\030\007 \001(\005:\0010\".\n\nwrapOrders\022 \n\006orders"
    "\030\001 \003(\0132\020.Order.wrapOrder", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "order.proto", &protobuf_RegisterTypes);
  wrapOrder::default_instance_ = new wrapOrder();
  wrapOrders::default_instance_ = new wrapOrders();
  wrapOrder::default_instance_->InitAsDefaultInstance();
  wrapOrders::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_order_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_order_2eproto {
  StaticDescriptorInitializer_order_2eproto() {
    protobuf_AddDesc_order_2eproto();
  }
} static_descriptor_initializer_order_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int wrapOrder::kVersionFieldNumber;
const int wrapOrder::kStateFieldNumber;
const int wrapOrder::kTypeFieldNumber;
const int wrapOrder::kOrderIdFieldNumber;
const int wrapOrder::kOrderTimeFieldNumber;
const int wrapOrder::kPeopleFieldNumber;
const int wrapOrder::kCancelCodeFieldNumber;
#endif  // !_MSC_VER

wrapOrder::wrapOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wrapOrder::InitAsDefaultInstance() {
}

wrapOrder::wrapOrder(const wrapOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wrapOrder::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  state_ = 0;
  type_ = 0;
  order_id_ = GOOGLE_LONGLONG(0);
  order_time_ = 0;
  people_ = 0;
  cancel_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wrapOrder::~wrapOrder() {
  SharedDtor();
}

void wrapOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wrapOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wrapOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wrapOrder_descriptor_;
}

const wrapOrder& wrapOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_2eproto();
  return *default_instance_;
}

wrapOrder* wrapOrder::default_instance_ = NULL;

wrapOrder* wrapOrder::New() const {
  return new wrapOrder;
}

void wrapOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    state_ = 0;
    type_ = 0;
    order_id_ = GOOGLE_LONGLONG(0);
    order_time_ = 0;
    people_ = 0;
    cancel_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wrapOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // optional int64 order_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_order_time;
        break;
      }

      // optional int32 order_time = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_time_)));
          set_has_order_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_people;
        break;
      }

      // optional int32 people = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_people:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &people_)));
          set_has_people();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cancel_code;
        break;
      }

      // optional int32 cancel_code = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancel_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_code_)));
          set_has_cancel_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wrapOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 state = 2 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int64 order_id = 4 [default = 0];
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->order_id(), output);
  }

  // optional int32 order_time = 5 [default = 0];
  if (has_order_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->order_time(), output);
  }

  // optional int32 people = 6 [default = 0];
  if (has_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->people(), output);
  }

  // optional int32 cancel_code = 7 [default = 0];
  if (has_cancel_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cancel_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wrapOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 state = 2 [default = 0];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int64 order_id = 4 [default = 0];
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->order_id(), target);
  }

  // optional int32 order_time = 5 [default = 0];
  if (has_order_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->order_time(), target);
  }

  // optional int32 people = 6 [default = 0];
  if (has_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->people(), target);
  }

  // optional int32 cancel_code = 7 [default = 0];
  if (has_cancel_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cancel_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wrapOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 state = 2 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 order_id = 4 [default = 0];
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_id());
    }

    // optional int32 order_time = 5 [default = 0];
    if (has_order_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_time());
    }

    // optional int32 people = 6 [default = 0];
    if (has_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->people());
    }

    // optional int32 cancel_code = 7 [default = 0];
    if (has_cancel_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wrapOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wrapOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wrapOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wrapOrder::MergeFrom(const wrapOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_order_time()) {
      set_order_time(from.order_time());
    }
    if (from.has_people()) {
      set_people(from.people());
    }
    if (from.has_cancel_code()) {
      set_cancel_code(from.cancel_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wrapOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wrapOrder::CopyFrom(const wrapOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wrapOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void wrapOrder::Swap(wrapOrder* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(state_, other->state_);
    std::swap(type_, other->type_);
    std::swap(order_id_, other->order_id_);
    std::swap(order_time_, other->order_time_);
    std::swap(people_, other->people_);
    std::swap(cancel_code_, other->cancel_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wrapOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wrapOrder_descriptor_;
  metadata.reflection = wrapOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wrapOrders::kOrdersFieldNumber;
#endif  // !_MSC_VER

wrapOrders::wrapOrders()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wrapOrders::InitAsDefaultInstance() {
}

wrapOrders::wrapOrders(const wrapOrders& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wrapOrders::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wrapOrders::~wrapOrders() {
  SharedDtor();
}

void wrapOrders::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wrapOrders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wrapOrders::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wrapOrders_descriptor_;
}

const wrapOrders& wrapOrders::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_2eproto();
  return *default_instance_;
}

wrapOrders* wrapOrders::default_instance_ = NULL;

wrapOrders* wrapOrders::New() const {
  return new wrapOrders;
}

void wrapOrders::Clear() {
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wrapOrders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Order.wrapOrder orders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_orders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wrapOrders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Order.wrapOrder orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wrapOrders::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Order.wrapOrder orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->orders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wrapOrders::ByteSize() const {
  int total_size = 0;

  // repeated .Order.wrapOrder orders = 1;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wrapOrders::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wrapOrders* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wrapOrders*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wrapOrders::MergeFrom(const wrapOrders& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wrapOrders::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wrapOrders::CopyFrom(const wrapOrders& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wrapOrders::IsInitialized() const {

  for (int i = 0; i < orders_size(); i++) {
    if (!this->orders(i).IsInitialized()) return false;
  }
  return true;
}

void wrapOrders::Swap(wrapOrders* other) {
  if (other != this) {
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wrapOrders::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wrapOrders_descriptor_;
  metadata.reflection = wrapOrders_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Order

// @@protoc_insertion_point(global_scope)
